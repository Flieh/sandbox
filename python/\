import sys
import math


def helloworld():
    return 'hello world'

def factorial(n):
    if n == 1:
        return 1
    return n * factorial(n - 1)
def fib(n):
    cache = {0:0, 1:1}
    if n in cache:
        return cache[n]
    cache[n] = fib(n - 1) + fib(n - 2)
    return cache[n]
def fibit(n):
    a = 0
    b = 1
    if n in (a,b):
        return n
    retval = 1
    for i in range(n - 1):
        retval = a + b
        a = b
        b = retval
    return retval

class Fibonacci:
    def __init__(self):
        self.cache = [0, 1]

    def __call__(self, n):
        # Validate the value of n

        if not (isinstance(n, int) and n >= 0):
            raise ValueError(f'Positive integer number expected, got "{n}"')
            # Check for computed Fibonacci numbers

        if n < len(self.cache):
            return self.cache[n]
        else:
            # Compute and cache the requested Fibonacci number
            fib_number = self(n - 1) + self(n - 2)
            self.cache.append(fib_number)

        return self.cache[n]


if __name__ == "__main__":
    fib_of = Fibonacci()
    print(fib_of(5))
    print(fib_of(15))
    print(fib_of(19))
